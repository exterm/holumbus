--- src/Data/Binary.hs	2010-01-05 16:28:32.000000000 +0100
+++ src/Data/HBinary.hs	2010-01-05 16:05:04.000000000 +0100
@@ -582,10 +582,38 @@
 ------------------------------------------------------------------------
 -- Container types
 
-instance Binary a => Binary [a] where
-    put l  = put (length l) >> mapM_ put l
-    get    = do n <- get :: Get Int
-                getMany n
+-- new HBinary instance for lists.
+instance (Binary a) => Binary [a] where
+--  put [] = putWord8 0
+--  put (x:xs) = putWord8 1 >> put x >> put xs
+  put l  = mapM_ (\x -> putWord8 1 >> put x) l >> putWord8 0
+
+  get = do
+    next <- getWord8
+    get' next []
+    where
+      get' 0 xs = return $! reverse xs
+      get' 1 xs = do
+        x    <- get
+        next <- getWord8
+        x `seq` get' next (x:xs)
+      get' _ _ = error "No list instance!"
+      {-# INLINE get' #-}
+
+--  get = do
+--    next <- getWord8
+--    if next==0
+--      then return []
+--      else do
+--        x  <- get
+--        xs <- get
+--        x `seq` return (x:xs)
+
+
+--instance Binary a => Binary [a] where
+--    put l  = put (length l) >> mapM_ put l
+--    get    = do n <- get :: Get Int
+--                getMany n
 
 -- | 'getMany n' get 'n' elements in order, without blowing the stack.
 getMany :: Binary a => Int -> Get [a]
